name: packer-build-vm-image

on: 
  pull_request:
    
    branches:
      - main
    # types:
    #   - closed

jobs:
  build-image:
    runs-on: ubuntu-latest

    # if: ${{ github.event.pull_request.merged == true }}
    steps:

      - name: Checking out code
        uses: actions/checkout@v4

      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCLOUD_CRED }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: 'Use gcloud CLI'
        run: 'gcloud info'
      
      - name: Setup packer 
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: "1.10.1"
      
      - name: create webapp zip file 
        run: |
          cd ..
          zip -r webapp.zip webapp
          cp webapp.zip webapp/
      
      - name: Initialize packer
        run: packer init googlecompute.pkr.hcl

      - name: Build image 
        run: packer build googlecompute.pkr.hcl \
              -var "image_name=${{secrets.IMAGE_NAME}}"

      - name: Create new instance template
        run: gcloud compute instance-templates create ${{secrets.TEMPLATE_NAME}} \
                --project="dev-aditya-mysore" \
                --instance-template-region=${{secrets.REGION}} \
                --image=${{secrets.IMAGE_NAME}} \ 
                --machine-type=${{secrets.MACHINE_TYPE}} \
                --boot-disk-type=${{secrets.DISK_TYPE}} \
                --boot-disk-size=${{secrets.DISK_SIZE}} \
                --stack-type=${{secrets.STACK_TYPE}} \
                --subnet=${{secrets.SUBNET}} \
                --service-account=${{secrets.VM_SERVICE_ACCOUNT}} \
                --scopes="cloud-platform" \
                --network-tier=${{secrets.VM_NETWORK_TIER}} \
                --boot-disk-kms-key=${{secrets.VM_KMS_KEY}} \
                --tags=${{secrets.VM_NETWORK_TAGS}} \
                --metadata=startup-script='#!/bin/bash
                      echo "Hello, World! This is a startup script."
                      echo "Started with startup script"
                      if ! test [-f /opt/webapp/.env]; then
                        echo "DATABASE_NAME=${{secrets.VM_DB_NAME}}" > /opt/webapp/.env
                        echo "USERNAME=${{secrets.VM_DB_USERNAME}}" >> /opt/webapp/.env
                        echo "PASSWORD=${{secrets.VM_DB_PASSWORD}}" >> /opt/webapp/.env
                        echo "DATABASE_HOST=${{secrets.VM_DB_HOST}}" >> /opt/webapp/.env
                        echo "PUBSUB=${{secrets.VM_PUBSUB_NAME}}" >> /opt/webapp/.env
                        sudo chown csye6225:csye6225 /opt/webapp/.env
                      fi
                      sudo systemctl daemon-reload
                      sudo systemctl enable webapp.service
                      sudo systemctl start webapp.service'
